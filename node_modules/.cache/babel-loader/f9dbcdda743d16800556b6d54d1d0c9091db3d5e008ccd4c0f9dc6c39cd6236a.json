{"ast":null,"code":"var _jsxFileName = \"/home/artem/github_space/pizza_antd/pizza_deco_antd/src/components/Sort/Sort.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport styles from './Sort.module.css';\nimport { setActiveSortType } from '../../redux/slices/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Sort = ( /*{ sortType, setSortType, sortTypes }*/\n) => {\n  _s();\n  /**------------------------------------------------------------------------------------------------\n   * !                                          VISABILITY logic\n   *   Создаем стейт для условного рендеринга при нажатии isVisible\n   *   Далее используем useEffect тк нам нужно чтобы eventListener создавался только при первой отрисовке\n   *   компонента, а не еще по одному при кадждом ререндере\n   *   Создаем ссылку на элемент сортировки через useRef\n   *   Создаем функцию handleClick, которая принимает event и говорим, что если при клике в этот ивент не имеет в\n   *   path наш элемент useRef, то скрываем попап\n   *   Далее создаем листенер на клик, который будет выполнять handleClick\n   *   Но так же создаем return в useEffect'e (отрабатывает при inmount'e компонента) и кидаем туда функцию,\n   *   которая вызвает removeEventListener, тк изначальный addEvent дудет работать, даже если на экране не будет\n   *   компонента сортироовки (например в корзине). То есть без этого при кликах в корзине будет работать листенер\n   *------------------------------------------------------------------------------------------------**/\n  const [isVisible, setIsVisible] = useState(false);\n  const input = useRef(null);\n  useEffect(() => {\n    const handleClick = event => {\n      if (input.current && !event.composedPath().includes(input.current)) {\n        // console.log('clicked')\n        setIsVisible(false);\n      }\n    };\n    document.body.addEventListener('click', handleClick);\n    return () => document.body.removeEventListener('click', handleClick);\n  }, []);\n  /*============================ END OF visibility ============================*/\n\n  /**========================================================================\n   * !                              SORTING logic\n   *   create array of sorting types (sortTypes)\n   *   import setActiveSortType action from  '../../redux/slices/filterSlice'\n   *   select activeSortType from store (useSelector) (state.filter.activeSortType)\n   *   create function that set ActiveSortType and close popup (setIsVisible(false))\n   *   render sortTypes, create logic of onClick etc...\n   *========================================================================**/\n  const sortTypes = ['популярности', 'цене', 'алфавиту'];\n  const activeSortType = useSelector(state => state.filter.activeSortType);\n  const dispatch = useDispatch();\n  const changeType = index => {\n    setIsVisible(false);\n    dispatch(setActiveSortType(sortTypes[index]));\n  };\n  /*------------------------------------------ END OF Sorting ------------------------------------------*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.sort,\n    ref: input,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: styles.span,\n      children: [\"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u043F\\u043E:\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => setIsVisible(!isVisible),\n        className: styles.span__dashed,\n        children: activeSortType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), isVisible && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.popup__ul,\n      children: sortTypes.map((activeSortType, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => changeType(index),\n        className: styles.li,\n        children: activeSortType\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Sort, \"UypiRsr6UTSVjI/q6C8uciWOrs4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Sort;\nvar _c;\n$RefreshReg$(_c, \"Sort\");","map":{"version":3,"names":["useState","useRef","useEffect","styles","setActiveSortType","useDispatch","useSelector","jsxDEV","_jsxDEV","Sort","_s","isVisible","setIsVisible","input","handleClick","event","current","composedPath","includes","document","body","addEventListener","removeEventListener","sortTypes","activeSortType","state","filter","dispatch","changeType","index","className","sort","ref","children","span","onClick","span__dashed","fileName","_jsxFileName","lineNumber","columnNumber","popup__ul","map","li","_c","$RefreshReg$"],"sources":["/home/artem/github_space/pizza_antd/pizza_deco_antd/src/components/Sort/Sort.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport styles from './Sort.module.css';\nimport { setActiveSortType } from '../../redux/slices/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const Sort = (/*{ sortType, setSortType, sortTypes }*/) => {\n  /**------------------------------------------------------------------------------------------------\n   * !                                          VISABILITY logic\n   *   Создаем стейт для условного рендеринга при нажатии isVisible\n   *   Далее используем useEffect тк нам нужно чтобы eventListener создавался только при первой отрисовке\n   *   компонента, а не еще по одному при кадждом ререндере\n   *   Создаем ссылку на элемент сортировки через useRef\n   *   Создаем функцию handleClick, которая принимает event и говорим, что если при клике в этот ивент не имеет в\n   *   path наш элемент useRef, то скрываем попап\n   *   Далее создаем листенер на клик, который будет выполнять handleClick\n   *   Но так же создаем return в useEffect'e (отрабатывает при inmount'e компонента) и кидаем туда функцию,\n   *   которая вызвает removeEventListener, тк изначальный addEvent дудет работать, даже если на экране не будет\n   *   компонента сортироовки (например в корзине). То есть без этого при кликах в корзине будет работать листенер\n   *------------------------------------------------------------------------------------------------**/\n  const [isVisible, setIsVisible] = useState(false);\n  const input = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClick = (event: MouseEvent) => {\n      if (input.current && !event.composedPath().includes(input.current)) {\n        // console.log('clicked')\n        setIsVisible(false);\n      }\n    };\n    document.body.addEventListener('click', handleClick);\n\n    return () => document.body.removeEventListener('click', handleClick);\n  }, []);\n  /*============================ END OF visibility ============================*/\n\n  /**========================================================================\n   * !                              SORTING logic\n   *   create array of sorting types (sortTypes)\n   *   import setActiveSortType action from  '../../redux/slices/filterSlice'\n   *   select activeSortType from store (useSelector) (state.filter.activeSortType)\n   *   create function that set ActiveSortType and close popup (setIsVisible(false))\n   *   render sortTypes, create logic of onClick etc...\n   *========================================================================**/\n  const sortTypes = ['популярности', 'цене', 'алфавиту'];\n\n  const activeSortType = useSelector((state: any) => state.filter.activeSortType);\n  const dispatch = useDispatch();\n\n  const changeType = (index: number) => {\n    setIsVisible(false);\n    dispatch(setActiveSortType(sortTypes[index]));\n  };\n  /*------------------------------------------ END OF Sorting ------------------------------------------*/\n\n  return (\n    <div className={styles.sort} ref={input}>\n      <span className={styles.span}>\n        Сортировка по:{' '}\n        <span onClick={() => setIsVisible(!isVisible)} className={styles.span__dashed}>\n          {activeSortType}\n        </span>\n      </span>\n\n      {isVisible && (\n        <ul className={styles.popup__ul}>\n          {sortTypes.map((activeSortType, index) => (\n            <li onClick={() => changeType(index)} className={styles.li} key={index}>\n              {activeSortType}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}