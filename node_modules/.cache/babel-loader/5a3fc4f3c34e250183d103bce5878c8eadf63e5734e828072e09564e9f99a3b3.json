{"ast":null,"code":"var _jsxFileName = \"/home/artem/github_space/pizza_antd/pizza_deco_antd/src/components/Sort/Sort.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport { setActiveSortType } from '../../redux/slices/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Select } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Sort = ( /*{ sortType, setSortType, sortTypes }*/\n) => {\n  _s();\n  /**------------------------------------------------------------------------------------------------\n   * !                                          VISABILITY logic\n   *   Создаем стейт для условного рендеринга при нажатии isVisible\n   *   Далее используем useEffect тк нам нужно чтобы eventListener создавался только при первой отрисовке\n   *   компонента, а не еще по одному при кадждом ререндере\n   *   Создаем ссылку на элемент сортировки через useRef\n   *   Создаем функцию handleClick, которая принимает event и говорим, что если при клике в этот ивент не имеет в\n   *   path наш элемент useRef, то скрываем попап\n   *   Далее создаем листенер на клик, который будет выполнять handleClick\n   *   Но так же создаем return в useEffect'e (отрабатывает при inmount'e компонента) и кидаем туда функцию,\n   *   которая вызвает removeEventListener, тк изначальный addEvent дудет работать, даже если на экране не будет\n   *   компонента сортироовки (например в корзине). То есть без этого при кликах в корзине будет работать листенер\n   *------------------------------------------------------------------------------------------------**/\n  const [isVisible, setIsVisible] = useState(false);\n  const input = useRef(null);\n  useEffect(() => {\n    const handleClick = event => {\n      if (input.current && !event.composedPath().includes(input.current)) {\n        // console.log('clicked')\n        setIsVisible(false);\n      }\n    };\n    document.body.addEventListener('click', handleClick);\n    return () => document.body.removeEventListener('click', handleClick);\n  }, []);\n  /*============================ END OF visibility ============================*/\n\n  /**========================================================================\n   * !                              SORTING logic\n   *   create array of sorting types (sortTypes)\n   *   import setActiveSortType action from  '../../redux/slices/filterSlice'\n   *   select activeSortType from store (useSelector) (state.filter.activeSortType)\n   *   create function that set ActiveSortType and close popup (setIsVisible(false))\n   *   render sortTypes, create logic of onClick etc...\n   *========================================================================**/\n  const sortTypes = [{\n    value: 'популярности',\n    label: 'популярности'\n  }, {\n    value: 'цене',\n    label: 'цене'\n  }, {\n    value: 'алфавиту',\n    label: 'алфавиту'\n  }];\n  const activeSortType = useSelector(state => state.filter.activeSortType);\n  const dispatch = useDispatch();\n  const changeType = index => {\n    setIsVisible(false);\n    dispatch(setActiveSortType(sortTypes[index]));\n  };\n  /*------------------------------------------ END OF Sorting ------------------------------------------*/\n\n  return /*#__PURE__*/_jsxDEV(Select, {\n    defaultValue: \"\\u043F\\u043E\\u043F\\u0443\\u043B\\u044F\\u0440\\u043D\\u043E\\u0441\\u0442\\u0438\",\n    style: {\n      width: 240\n    },\n    options: sortTypes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this)\n\n  // <div className={styles.sort} ref={input}>\n  //   <span className={styles.span}>\n  //     Сортировка по:{' '}\n  //     <span onClick={() => setIsVisible(!isVisible)} className={styles.span__dashed}>\n  //       {activeSortType}\n  //     </span>\n  //   </span>\n\n  //   {isVisible && (\n  //     <ul className={styles.popup__ul}>\n  //       {sortTypes.map((activeSortType, index) => (\n  //         <li onClick={() => changeType(index)} className={styles.li} key={index}>\n  //           {activeSortType}\n  //         </li>\n  //       ))}\n  //     </ul>\n  //   )}\n  // </div>\n  ;\n};\n_s(Sort, \"UypiRsr6UTSVjI/q6C8uciWOrs4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Sort;\nvar _c;\n$RefreshReg$(_c, \"Sort\");","map":{"version":3,"names":["useState","useRef","useEffect","setActiveSortType","useDispatch","useSelector","Select","jsxDEV","_jsxDEV","Sort","_s","isVisible","setIsVisible","input","handleClick","event","current","composedPath","includes","document","body","addEventListener","removeEventListener","sortTypes","value","label","activeSortType","state","filter","dispatch","changeType","index","defaultValue","style","width","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/artem/github_space/pizza_antd/pizza_deco_antd/src/components/Sort/Sort.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport styles from './Sort.module.css';\nimport { setActiveSortType } from '../../redux/slices/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Select } from 'antd';\n\nexport const Sort = (/*{ sortType, setSortType, sortTypes }*/) => {\n  /**------------------------------------------------------------------------------------------------\n   * !                                          VISABILITY logic\n   *   Создаем стейт для условного рендеринга при нажатии isVisible\n   *   Далее используем useEffect тк нам нужно чтобы eventListener создавался только при первой отрисовке\n   *   компонента, а не еще по одному при кадждом ререндере\n   *   Создаем ссылку на элемент сортировки через useRef\n   *   Создаем функцию handleClick, которая принимает event и говорим, что если при клике в этот ивент не имеет в\n   *   path наш элемент useRef, то скрываем попап\n   *   Далее создаем листенер на клик, который будет выполнять handleClick\n   *   Но так же создаем return в useEffect'e (отрабатывает при inmount'e компонента) и кидаем туда функцию,\n   *   которая вызвает removeEventListener, тк изначальный addEvent дудет работать, даже если на экране не будет\n   *   компонента сортироовки (например в корзине). То есть без этого при кликах в корзине будет работать листенер\n   *------------------------------------------------------------------------------------------------**/\n  const [isVisible, setIsVisible] = useState(false);\n  const input = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClick = (event: MouseEvent) => {\n      if (input.current && !event.composedPath().includes(input.current)) {\n        // console.log('clicked')\n        setIsVisible(false);\n      }\n    };\n    document.body.addEventListener('click', handleClick);\n\n    return () => document.body.removeEventListener('click', handleClick);\n  }, []);\n  /*============================ END OF visibility ============================*/\n\n  /**========================================================================\n   * !                              SORTING logic\n   *   create array of sorting types (sortTypes)\n   *   import setActiveSortType action from  '../../redux/slices/filterSlice'\n   *   select activeSortType from store (useSelector) (state.filter.activeSortType)\n   *   create function that set ActiveSortType and close popup (setIsVisible(false))\n   *   render sortTypes, create logic of onClick etc...\n   *========================================================================**/\n  const sortTypes = [ {value: 'популярности', label: 'популярности' },  {value: 'цене', label: 'цене' }, {value: 'алфавиту', label: 'алфавиту' }];\n  const activeSortType = useSelector((state: any) => state.filter.activeSortType);\n  const dispatch = useDispatch();\n\n  const changeType = (index: number) => {\n    setIsVisible(false);\n    dispatch(setActiveSortType(sortTypes[index]));\n  };\n  /*------------------------------------------ END OF Sorting ------------------------------------------*/\n\n  return (\n\n\n    <Select defaultValue=\"популярности\" style={{ width: 240 }} options={sortTypes} />\n\n    \n    // <div className={styles.sort} ref={input}>\n    //   <span className={styles.span}>\n    //     Сортировка по:{' '}\n    //     <span onClick={() => setIsVisible(!isVisible)} className={styles.span__dashed}>\n    //       {activeSortType}\n    //     </span>\n    //   </span>\n\n    //   {isVisible && (\n    //     <ul className={styles.popup__ul}>\n    //       {sortTypes.map((activeSortType, index) => (\n    //         <li onClick={() => changeType(index)} className={styles.li} key={index}>\n    //           {activeSortType}\n    //         </li>\n    //       ))}\n    //     </ul>\n    //   )}\n    // </div>\n  );\n};\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAEnD,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,MAAM,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,OAAO,MAAMC,IAAI,GAAGA,CAAA,CAAC;AAAA,KAA6C;EAAAC,EAAA;EAChE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMa,KAAK,GAAGZ,MAAM,CAAiB,IAAI,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMY,WAAW,GAAIC,KAAiB,IAAK;MACzC,IAAIF,KAAK,CAACG,OAAO,IAAI,CAACD,KAAK,CAACE,YAAY,CAAC,CAAC,CAACC,QAAQ,CAACL,KAAK,CAACG,OAAO,CAAC,EAAE;QAClE;QACAJ,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IACDO,QAAQ,CAACC,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAEP,WAAW,CAAC;IAEpD,OAAO,MAAMK,QAAQ,CAACC,IAAI,CAACE,mBAAmB,CAAC,OAAO,EAAER,WAAW,CAAC;EACtE,CAAC,EAAE,EAAE,CAAC;EACN;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMS,SAAS,GAAG,CAAE;IAACC,KAAK,EAAE,cAAc;IAAEC,KAAK,EAAE;EAAe,CAAC,EAAG;IAACD,KAAK,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAO,CAAC,EAAE;IAACD,KAAK,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAW,CAAC,CAAC;EAC/I,MAAMC,cAAc,GAAGrB,WAAW,CAAEsB,KAAU,IAAKA,KAAK,CAACC,MAAM,CAACF,cAAc,CAAC;EAC/E,MAAMG,QAAQ,GAAGzB,WAAW,CAAC,CAAC;EAE9B,MAAM0B,UAAU,GAAIC,KAAa,IAAK;IACpCnB,YAAY,CAAC,KAAK,CAAC;IACnBiB,QAAQ,CAAC1B,iBAAiB,CAACoB,SAAS,CAACQ,KAAK,CAAC,CAAC,CAAC;EAC/C,CAAC;EACD;;EAEA,oBAGEvB,OAAA,CAACF,MAAM;IAAC0B,YAAY,EAAC,0EAAc;IAACC,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAI,CAAE;IAACC,OAAO,EAAEZ;EAAU;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;;EAGhF;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ,CAAC;AAAC7B,EAAA,CAzEWD,IAAI;EAAA,QAuCQJ,WAAW,EACjBD,WAAW;AAAA;AAAAoC,EAAA,GAxCjB/B,IAAI;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}