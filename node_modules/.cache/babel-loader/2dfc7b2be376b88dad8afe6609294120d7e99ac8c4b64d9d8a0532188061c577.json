{"ast":null,"code":"var _jsxFileName = \"/home/artem/github_space/pizza_antd/pizza_deco_antd/src/components/Sort/Sort.tsx\",\n  _s = $RefreshSig$();\nimport { setActiveSortType } from '../../redux/slices/filterSlice';\nimport { useDispatch } from 'react-redux';\nimport { Select, Flex } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Sort = ( /*{ sortType, setSortType, sortTypes }*/\n) => {\n  _s();\n  /**------------------------------------------------------------------------------------------------\n   * !                                          VISABILITY logic\n   *   Создаем стейт для условного рендеринга при нажатии isVisible\n   *   Далее используем useEffect тк нам нужно чтобы eventListener создавался только при первой отрисовке\n   *   компонента, а не еще по одному при кадждом ререндере\n   *   Создаем ссылку на элемент сортировки через useRef\n   *   Создаем функцию handleClick, которая принимает event и говорим, что если при клике в этот ивент не имеет в\n   *   path наш элемент useRef, то скрываем попап\n   *   Далее создаем листенер на клик, который будет выполнять handleClick\n   *   Но так же создаем return в useEffect'e (отрабатывает при inmount'e компонента) и кидаем туда функцию,\n   *   которая вызвает removeEventListener, тк изначальный addEvent дудет работать, даже если на экране не будет\n   *   компонента сортироовки (например в корзине). То есть без этого при кликах в корзине будет работать листенер\n   *------------------------------------------------------------------------------------------------**/\n  // const [isVisible, setIsVisible] = useState(false);\n  // const input = useRef<HTMLDivElement>(null);\n\n  // useEffect(() => {\n  //   const handleClick = (event: MouseEvent) => {\n  //     if (input.current && !event.composedPath().includes(input.current)) {\n  //       // console.log('clicked')\n  //       setIsVisible(false);\n  //     }\n  //   };\n  //   document.body.addEventListener('click', handleClick);\n\n  //   return () => document.body.removeEventListener('click', handleClick);\n  // }, []);\n  /*============================ END OF visibility ============================*/\n\n  /**========================================================================\n   * !                              SORTING logic\n   *   create array of sorting types (sortTypes)\n   *   import setActiveSortType action from  '../../redux/slices/filterSlice'\n   *   select activeSortType from store (useSelector) (state.filter.activeSortType)\n   *   create function that set ActiveSortType and close popup (setIsVisible(false))\n   *   render sortTypes, create logic of onClick etc...\n   *========================================================================**/\n  const sortTypes = [{\n    value: 'популярности',\n    label: 'популярности'\n  }, {\n    value: 'цене',\n    label: 'цене'\n  }, {\n    value: 'алфавиту',\n    label: 'алфавиту'\n  }];\n  // const activeSortType = useSelector((state: any) => state.filter.activeSortType);\n  const dispatch = useDispatch();\n\n  // const changeType = (index: number) => {\n  //   setIsVisible(false);\n  //   dispatch(setActiveSortType(sortTypes[index]));\n  // };\n  /*------------------------------------------ END OF Sorting ------------------------------------------*/\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    justify: \"flex-end\",\n    align: \"center\",\n    gap: \"small\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u043F\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      defaultValue: \"\\u043F\\u043E\\u043F\\u0443\\u043B\\u044F\\u0440\\u043D\\u043E\\u0441\\u0442\\u0438\",\n      style: {\n        width: 140\n      },\n      options: sortTypes,\n      onChange: value => dispatch(setActiveSortType(value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this)\n\n  // <div className={styles.sort} ref={input}>\n  //   <span className={styles.span}>\n  //     Сортировка по:{' '}\n  //     <span onClick={() => setIsVisible(!isVisible)} className={styles.span__dashed}>\n  //       {activeSortType}\n  //     </span>\n  //   </span>\n\n  //   {isVisible && (\n  //     <ul className={styles.popup__ul}>\n  //       {sortTypes.map((activeSortType, index) => (\n  //         <li onClick={() => changeType(index)} className={styles.li} key={index}>\n  //           {activeSortType}\n  //         </li>\n  //       ))}\n  //     </ul>\n  //   )}\n  // </div>\n  ;\n};\n_s(Sort, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c = Sort;\nvar _c;\n$RefreshReg$(_c, \"Sort\");","map":{"version":3,"names":["setActiveSortType","useDispatch","Select","Flex","jsxDEV","_jsxDEV","Sort","_s","sortTypes","value","label","dispatch","justify","align","gap","children","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","style","width","options","onChange","_c","$RefreshReg$"],"sources":["/home/artem/github_space/pizza_antd/pizza_deco_antd/src/components/Sort/Sort.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport styles from './Sort.module.css';\nimport { setActiveSortType } from '../../redux/slices/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Select, Flex } from 'antd';\n\nexport const Sort = (/*{ sortType, setSortType, sortTypes }*/) => {\n  /**------------------------------------------------------------------------------------------------\n   * !                                          VISABILITY logic\n   *   Создаем стейт для условного рендеринга при нажатии isVisible\n   *   Далее используем useEffect тк нам нужно чтобы eventListener создавался только при первой отрисовке\n   *   компонента, а не еще по одному при кадждом ререндере\n   *   Создаем ссылку на элемент сортировки через useRef\n   *   Создаем функцию handleClick, которая принимает event и говорим, что если при клике в этот ивент не имеет в\n   *   path наш элемент useRef, то скрываем попап\n   *   Далее создаем листенер на клик, который будет выполнять handleClick\n   *   Но так же создаем return в useEffect'e (отрабатывает при inmount'e компонента) и кидаем туда функцию,\n   *   которая вызвает removeEventListener, тк изначальный addEvent дудет работать, даже если на экране не будет\n   *   компонента сортироовки (например в корзине). То есть без этого при кликах в корзине будет работать листенер\n   *------------------------------------------------------------------------------------------------**/\n  // const [isVisible, setIsVisible] = useState(false);\n  // const input = useRef<HTMLDivElement>(null);\n\n  // useEffect(() => {\n  //   const handleClick = (event: MouseEvent) => {\n  //     if (input.current && !event.composedPath().includes(input.current)) {\n  //       // console.log('clicked')\n  //       setIsVisible(false);\n  //     }\n  //   };\n  //   document.body.addEventListener('click', handleClick);\n\n  //   return () => document.body.removeEventListener('click', handleClick);\n  // }, []);\n  /*============================ END OF visibility ============================*/\n\n  /**========================================================================\n   * !                              SORTING logic\n   *   create array of sorting types (sortTypes)\n   *   import setActiveSortType action from  '../../redux/slices/filterSlice'\n   *   select activeSortType from store (useSelector) (state.filter.activeSortType)\n   *   create function that set ActiveSortType and close popup (setIsVisible(false))\n   *   render sortTypes, create logic of onClick etc...\n   *========================================================================**/\n  const sortTypes = [\n    { value: 'популярности', label: 'популярности' },\n    { value: 'цене', label: 'цене' },\n    { value: 'алфавиту', label: 'алфавиту' },\n  ];\n  // const activeSortType = useSelector((state: any) => state.filter.activeSortType);\n  const dispatch = useDispatch();\n\n  // const changeType = (index: number) => {\n  //   setIsVisible(false);\n  //   dispatch(setActiveSortType(sortTypes[index]));\n  // };\n  /*------------------------------------------ END OF Sorting ------------------------------------------*/\n\n  return (\n    <Flex justify='flex-end' align='center' gap='small'>\n      <span>Сортировка по</span>\n      <Select defaultValue=\"популярности\" style={{ width: 140 }} options={sortTypes} onChange={(value) => dispatch(setActiveSortType(value))} />\n    </Flex>\n\n    // <div className={styles.sort} ref={input}>\n    //   <span className={styles.span}>\n    //     Сортировка по:{' '}\n    //     <span onClick={() => setIsVisible(!isVisible)} className={styles.span__dashed}>\n    //       {activeSortType}\n    //     </span>\n    //   </span>\n\n    //   {isVisible && (\n    //     <ul className={styles.popup__ul}>\n    //       {sortTypes.map((activeSortType, index) => (\n    //         <li onClick={() => changeType(index)} className={styles.li} key={index}>\n    //           {activeSortType}\n    //         </li>\n    //       ))}\n    //     </ul>\n    //   )}\n    // </div>\n  );\n};\n"],"mappings":";;AAEA,SAASA,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAqB,aAAa;AACtD,SAASC,MAAM,EAAEC,IAAI,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,OAAO,MAAMC,IAAI,GAAGA,CAAA,CAAC;AAAA,KAA6C;EAAAC,EAAA;EAChE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,SAAS,GAAG,CAChB;IAAEC,KAAK,EAAE,cAAc;IAAEC,KAAK,EAAE;EAAe,CAAC,EAChD;IAAED,KAAK,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAO,CAAC,EAChC;IAAED,KAAK,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAW,CAAC,CACzC;EACD;EACA,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;;EAE9B;EACA;EACA;EACA;EACA;;EAEA,oBACEI,OAAA,CAACF,IAAI;IAACS,OAAO,EAAC,UAAU;IAACC,KAAK,EAAC,QAAQ;IAACC,GAAG,EAAC,OAAO;IAAAC,QAAA,gBACjDV,OAAA;MAAAU,QAAA,EAAM;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC1Bd,OAAA,CAACH,MAAM;MAACkB,YAAY,EAAC,0EAAc;MAACC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAI,CAAE;MAACC,OAAO,EAAEf,SAAU;MAACgB,QAAQ,EAAGf,KAAK,IAAKE,QAAQ,CAACX,iBAAiB,CAACS,KAAK,CAAC;IAAE;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtI;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ,CAAC;AAACZ,EAAA,CA7EWD,IAAI;EAAA,QA4CEL,WAAW;AAAA;AAAAwB,EAAA,GA5CjBnB,IAAI;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}